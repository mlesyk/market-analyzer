logging:
  level:
    root: ${ROOT_LOG_LEVEL:INFO}
    org:
      apache:
        kafka: ${KAFKA_LOG_LEVEL:off}
      mlesyk: ${APP_LOG_LEVEL:INFO}
      springframework: ${SPRING_LOG_LEVEL:INFO}
server:
  port : ${PROFITABLE_ORDERS_PORT:8085}
spring:
  task:
    scheduling:
      pool:
        size: 5
  profiles:
    active: dev
  datasource:
    url: jdbc:postgresql://${DATABASE_HOSTNAME:172.25.141.246}:${DATABASE_PORT:5432}/${DATABASE_NAME:market_data}
    driverClassName: org.postgresql.Driver
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: ${HIBERNATE_SHOW_SQL_ENABLED:false}
    properties:
      hibernate:
        jdbc:
          batch_size: 20
        order_inserts: true
app:
  services:
    avg_price_enabled: ${AVG_PRICE_ENABLED:false}
    statistics_enabled: ${STATISTICS_ENABLED:false}
  client:
    static_data:
      url: ${STATIC_DATA_URL:http://172.25.141.246:8084/}
      types_path: ${TYPE_ID_LIST:getItems}
      systems_path: ${SYSTEMS_LIST:getSystems}
      type_name_to_id_path: ${TYPE_NAME_TO_ID:getItemNameToIdList}
    market_api_reader:
      url: ${MARKET_API_READER_URL:http://172.25.141.246:8081/}
      route_path: ${ROUTE_PATH:route}
      statistics_path: ${STATISTICS_PATH:regions/{0}/orders/types/{1}/statistics}
    storage_service:
      url: ${STORAGE_SERVICE_URL:http://192.168.116.129:8082/}
      sell_orders_avg_price_path: ${SELL_ORDERS_AVG_PRICE_PATH:getSellOrdersAvgPrices}
      buy_orders_avg_price_path: ${BUY_ORDERS_AVG_PRICE_PATH:getBuyOrdersAvgPrices}
  orders:
    profit_amount_value: ${MIN_ORDERS_PROFIT:50000000.0}
    sell_order_prise_threshold: ${SELL_PRISE_THRESHOLD:0.5}
    buy_order_prise_threshold: ${BUY_PRISE_THRESHOLD:1.5}
    statistics_store_days_limit: ${ORDERS_STATISTICS_STORE_DAYS:7}
    consumer:
      kafka_orders_consumer_pool_size: ${KAFKA_CONSUMER_POOL_SIZE:5}
      kafka_orders_consumer_queue_size: ${KAFKA_CONSUMER_QUEUE_SIZE:500}
    cleaner:
      enabled: ${KAFKA_CLEANER_ENABLED:true}
      cache_life_minutes: ${KAFKA_CLEANER_CACHE_LIFETIME_MINUTES:5}
      registry_read_time_seconds: ${KAFKA_CLEANER_REGISTRY_READ_TIME_SECONDS:60}
      scheduler_delay: ${KAFKA_CLEANER_SCHEDULER_DELAY:300000}
      scheduler_initial_delay: ${KAFKA_CLEANER_SCHEDULER_INITIAL_DELAY:5000}
  kafka:
    hostname: ${KAFKA_HOSTNAME:172.25.141.246}
    port: ${KAFKA_PORT:29092}
    retention_ms: ${KAFKA_RETENTION:1800000}
    backoff:
      interval: 3000
      max_failure: 10
    topic:
      orders: ${KAFKA_TOPIC_ORDERS:orders}
      handler_orders_registry: ${KAFKA_TOPIC_HANDLER_ORDERS_REGISTRY:handler_orders_registry}
      profitable_orders: ${KAFKA_TOPIC_PROFITABLE_ORDERS:profitable_orders}
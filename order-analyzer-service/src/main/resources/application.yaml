logging:
  level:
    root: ${ROOT_LOG_LEVEL:INFO}
    org:
      apache:
        kafka: ${KAFKA_LOG_LEVEL:off}
      mlesyk: ${APP_LOG_LEVEL:INFO}
      springframework: ${SPRING_LOG_LEVEL:INFO}
server:
  port : ${ORDERS_ANALYZER_PORT:8082}
spring:
  task:
    scheduling:
      pool:
        size: 2
  datasource:
    url: jdbc:postgresql://${DATABASE_HOSTNAME:192.168.116.129}:${DATABASE_PORT:5432}/${DATABASE_NAME:market_data}
    driverClassName: org.postgresql.Driver
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: ${HIBERNATE_SHOW_SQL_ENABLED:false}
    properties:
      hibernate:
        jdbc:
          batch_size: 20
        order_inserts: true
app:
  orders:
    consumer:
      kafka_orders_consumer_pool_size: ${KAFKA_CONSUMER_POOL_SIZE:5}
      kafka_orders_consumer_queue_size: ${KAFKA_CONSUMER_QUEUE_SIZE:500}
    cleaner:
      enabled: ${KAFKA_CLEANER_ENABLED:true}
      cache_life_minutes: ${KAFKA_CLEANER_CACHE_LIFETIME_MINUTES:5}
      registry_read_time_seconds: ${KAFKA_CLEANER_REGISTRY_READ_TIME_SECONDS:60}
      scheduler_delay: ${KAFKA_CLEANER_SCHEDULER_DELAY:300000}
      scheduler_initial_delay: ${KAFKA_CLEANER_SCHEDULER_INITIAL_DELAY:900000}
    producer:
      pool_size: ${KAFKA_PRODUCER_POOL_SIZE:5}
      scheduler_delay: ${KAFKA_PRODUCER_SCHEDULER_DELAY:300000}
      scheduler_initial_delay: ${KAFKA_PRODUCER_SCHEDULER_INITIAL_DELAY:5000}
    profit_amount_value: ${MIN_ORDERS_PROFIT:50000000.0}
    sell_order_prise_threshold: ${SELL_PRISE_THRESHOLD:0.5}
    buy_order_prise_threshold: ${BUY_PRISE_THRESHOLD:1.5}
  kafka:
    hostname: ${KAFKA_HOSTNAME:172.25.141.246}
    port: ${KAFKA_PORT:29092}
    retention_ms: ${KAFKA_RETENTION:1800000}
    backoff:
      interval: 10000
      max_failure: 10
    topic:
      orders: ${KAFKA_TOPIC_ORDERS:orders}
      storage_orders_registry: ${KAFKA_TOPIC_STORAGE_ORDERS_REGISTRY:storage_orders_registry}
      profitable_orders: ${KAFKA_TOPIC_PROFITABLE_ORDERS:profitable_orders}